// Buildscript dependencies and plugins
//----------------------------------------------------------------------------------------------------------------------
buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.ajoberstar:gradle-git:1.7.2"
    }
}
plugins {
    id "com.eden.orchidPlugin" version "v0.2.0"
}
apply plugin: "org.ajoberstar.grgit"

// Orchid setup
//----------------------------------------------------------------------------------------------------------------------
repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://jitpack.io' }
}

dependencies {
    orchidDocsCompile 'io.github.javaeden.orchid:OrchidAll:v0.2.7'
}

project.version = '1'

orchid {
    version = "${project.version}"
    theme = "com.eden.orchid.editorial.EditorialTheme"

    if (project.hasProperty('env')) {
        switch (project.property('env')) {
            case 'prod':
                baseUrl = 'http://www.caseyjbrooks.com'
                break
            case 'dev':
                baseUrl = 'http://localhost:8080'
                break
        }
    } else {
        baseUrl = 'http://localhost:8080'
    }
}

// Publish to Github Pages
//----------------------------------------------------------------------------------------------------------------------
task publishSite {
    dependsOn 'orchidBuild'

    def source = file("$buildDir/docs/javadoc")
    def dest = file("$rootDir/docs")

    inputs.dir(source)
    outputs.dir(dest)

    doLast {
        copy {
            from source
            into dest
        }
    }
}

task deploy {
    dependsOn publishSite

    onlyIf {
        if (project.hasProperty('env') && project.property('env') == 'prod') {
            return true
        } else {
            println ':deploy task must be run in prod environment (-Penv=prod)'
            return false
        }
    }

    doLast {
        // go to gh-pages branch, remove current site folders, copy generated site into root, then commit and push
        grgit.checkout(branch: 'master')

        try {
            delete "$rootDir/index.html"
            delete "$rootDir/archive"
            delete "$rootDir/assets"
            delete "$rootDir/meta"
            delete "$rootDir/pages"
            delete "$rootDir/tags"
            delete "$rootDir/2017"

            copy {
                from "$rootDir/docs"
                into "$rootDir"
            }

            grgit.add(patterns: ['.'], update: true)
            grgit.commit(message: "Deploying Orchid Output")
            System.setProperty("org.ajoberstar.grgit.auth.username", project.properties['github_username'])
            System.setProperty("org.ajoberstar.grgit.auth.password", project.properties['github_password'])
            grgit.push()
        }
        catch (Exception e) {
            e.printStackTrace()
        }

        // go back to master branch
        grgit.checkout(branch: 'sources')
    }
}